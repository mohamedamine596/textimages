# -*- coding: utf-8 -*-
"""text_to_images.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C5_Co7XFYjaa1Ymwqbc56KHwjqQejns1
"""

# Commented out IPython magic to ensure Python compatibility.

# %pip install --quiet --upgrade diffusers transformers accelerate invisible_watermark mediapy

use_refiner = False

import mediapy as media
import random
import sys
import torch
from PIL import Image

from diffusers import DiffusionPipeline

# Set device based on available memory
device = "cpu"  # Use CPU as default for limited VRAM systems

pipe = DiffusionPipeline.from_pretrained(
    "stabilityai/stable-diffusion-xl-base-1.0",
    torch_dtype=torch.float32,  # Use float32 for CPU
    use_safetensors=True,
)

pipe.enable_attention_slicing()  # This helps with memory usage
pipe.set_progress_bar_config(disable=True)

# Don't move to CUDA when using CPU offloading as it conflicts
# pipe.to("cuda") - removed

if use_refiner:
  refiner = DiffusionPipeline.from_pretrained(
      "stabilityai/stable-diffusion-xl-refiner-1.0",
      text_encoder_2=pipe.text_encoder_2,
      vae=pipe.vae,
      torch_dtype=torch.float32,  # Use float32 for CPU
      use_safetensors=True,
  )

  # Remove GPU usage
  # refiner.to("cuda") - removed

# Use a more concise prompt which works better for image generation
# Image generation models work better with more concrete descriptions
prompt = "Modern luxury dream home, mountain view, sleek architecture, large windows, open floor plan, cozy interior with fireplace"

# Use a smaller height and width to reduce memory usage
height = 512  # Default is 1024
width = 512   # Default is 1024

seed = random.randint(0, sys.maxsize)

images = pipe(
    prompt=prompt,
    height=height,
    width=width,
    output_type="latent" if use_refiner else "pil",
    generator=torch.Generator().manual_seed(seed),  # Remove cuda requirement
).images

if use_refiner:
  images = refiner(
      prompt=prompt,
      image=images,
  ).images

print(f"Prompt:\t{prompt}\nSeed:\t{seed}")
images[0].show()
images[0].save("output.jpg")
print('')